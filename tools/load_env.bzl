"rules_envfile"

BUILD_DOT_BAZEL = '''
filegroup(
    name="environment"
    srcs=["environment.bzl"],
    visibility=["//visibility:public"]
)
'''

def _envfile_impl(repository_ctx):
    files = repository_ctx.attr.files
    lines = ["# Generated by rules_envfile - do not modify"]

    for file in files:
        path = repository_ctx.path(file)
        content = repository_ctx.read(path)
        for line in content.splitlines():
            env_var = line.split("=", 1)
            key, value = env_var[0], env_var[1]
            value = _quote(value) if not _starts_with_quote(value) else value
            lines.append("{}={}".format(key, value))

    env_file = "\n".join(lines)
    repository_ctx.file("environment.bzl", env_file)
    repository_ctx.file("BUILD.bazel", BUILD_DOT_BAZEL)


def _quote(value):
    value = value.replace("\\", "\\\\")
    value = value.replace("\"", "\\\"")
    return "\"{}\"".format(value)


def _starts_with_quote(value):
    valid_quote_chars = ['"', "'"]
    for quote_type in valid_quote_chars:
        if value.startswith(quote_type):
            return True
    return False


envfile = repository_rule(
    implementation = _envfile_impl,
    attrs = {
        "files": attr.label_list(
            allow_files = [".env"],
            doc = "Files containing environment variables",
        ),
    },
)